// models of XH(53) and X0(53); the quotient map XH(53) --> X0(53) //

Qx<[x]>:=PolynomialRing(Rationals(),8);
eqns := [ x[1]*x[3] - x[2]^2 + 5/2*x[4]*x[6] + 5/6*x[4]*x[7] - 23/6*x[4]*x[8] - 5/2*x[5]^2 + 
    11/2*x[5]*x[6] + 5/3*x[5]*x[7] + 10*x[5]*x[8] - 25/3*x[6]^2 - 9*x[6]*x[7] - 13/2*x[6]*x[8]
    - 3*x[7]^2 + 37/6*x[7]*x[8] + 5/2*x[8]^2,
x[1]*x[4] - x[2]*x[3] - x[4]^2 - 43/6*x[4]*x[6] - 5/6*x[4]*x[7] - 17/6*x[4]*x[8] + 43/6*x[5]^2
    - 13/6*x[5]*x[6] - 5/3*x[5]*x[7] - 113/3*x[5]*x[8] - 16/3*x[6]^2 + 34/3*x[6]*x[7] + 
    205/6*x[6]*x[8] + 16/3*x[7]^2 + 3/2*x[7]*x[8] + 75/2*x[8]^2,
x[1]*x[5] - x[3]^2 - 16/3*x[4]*x[6] - 28/3*x[4]*x[8] + 16/3*x[5]^2 - 1/3*x[5]*x[6] - x[5]*x[7]
    - 100/3*x[5]*x[8] - 19/3*x[6]^2 + 23/3*x[6]*x[7] + 73/3*x[6]*x[8] + 11/3*x[7]^2 + 
    13/3*x[7]*x[8] + 48*x[8]^2,
x[1]*x[6] - x[3]*x[4] + x[4]^2 - 3*x[4]*x[6] - 2/3*x[4]*x[7] - 31/3*x[4]*x[8] + 4*x[5]^2 - 
    2*x[5]*x[6] + 2/3*x[5]*x[7] - 22*x[5]*x[8] - 16/3*x[6]^2 + x[6]*x[7] + 16*x[6]*x[8] + 
    2*x[7]^2 + 14/3*x[7]*x[8] + 38*x[8]^2,
x[1]*x[7] - x[4]*x[5] + 5/3*x[4]*x[6] - x[4]*x[7] + 23/3*x[4]*x[8] - 5/3*x[5]^2 - 
    1/3*x[5]*x[6] + 38/3*x[5]*x[8] + 14/3*x[6]^2 + 2/3*x[6]*x[7] - 23/3*x[6]*x[8] - 1/3*x[7]^2
    - 17/3*x[7]*x[8] - 27*x[8]^2,
x[1]*x[8] - 2/3*x[4]*x[6] - 1/3*x[4]*x[7] + 2/3*x[4]*x[8] - 1/3*x[5]^2 + 4/3*x[5]*x[6] + 
    1/3*x[5]*x[7] + 1/3*x[5]*x[8] - 1/3*x[6]^2 + 1/3*x[6]*x[7] - 4/3*x[6]*x[8] + 1/3*x[7]^2 - 
    2*x[7]*x[8] - 3*x[8]^2,
x[2]*x[4] - x[3]^2 - x[4]*x[5] - 5/3*x[4]*x[6] - x[4]*x[7] + 1/3*x[4]*x[8] + 5/3*x[5]^2 - 
    5/3*x[5]*x[6] + x[5]*x[7] - 11/3*x[5]*x[8] + 10/3*x[6]^2 + 10/3*x[6]*x[7] + 5/3*x[6]*x[8] 
    + 4/3*x[7]^2 - 10/3*x[7]*x[8] + x[8]^2,
x[2]*x[5] - x[3]*x[4] - 11/3*x[4]*x[6] + 1/3*x[4]*x[7] - x[4]*x[8] + 14/3*x[5]^2 - 
    11/3*x[5]*x[6] - 7/3*x[5]*x[7] - 86/3*x[5]*x[8] + x[6]^2 + 34/3*x[6]*x[7] + 62/3*x[6]*x[8]
    + 13/3*x[7]^2 - 11/3*x[7]*x[8] + 25*x[8]^2,
x[2]*x[6] - x[4]^2 + x[4]*x[5] - 4*x[4]*x[6] + 4/3*x[4]*x[7] + 2/3*x[4]*x[8] + 4*x[5]^2 - 
    2*x[5]*x[6] - 10/3*x[5]*x[7] - 25*x[5]*x[8] - 4/3*x[6]^2 + 10*x[6]*x[7] + 19*x[6]*x[8] + 
    3*x[7]^2 - 4/3*x[7]*x[8] + 21*x[8]^2,
x[2]*x[7] + x[4]*x[6] - 1/3*x[4]*x[7] + 1/3*x[4]*x[8] - 2*x[5]^2 + x[5]*x[6] + 1/3*x[5]*x[7] +
    11*x[5]*x[8] - 2/3*x[6]^2 - 5*x[6]*x[7] - 7*x[6]*x[8] - 2*x[7]^2 + 4/3*x[7]*x[8] - 
    9*x[8]^2,
x[2]*x[8] + 2/3*x[4]*x[6] + 2/3*x[4]*x[8] - 2/3*x[5]^2 - 1/3*x[5]*x[6] + 11/3*x[5]*x[8] + 
    5/3*x[6]^2 - 1/3*x[6]*x[7] - 11/3*x[6]*x[8] - 1/3*x[7]^2 - 2/3*x[7]*x[8] - 6*x[8]^2,
x[3]*x[5] - x[4]^2 + 5/6*x[4]*x[6] + 13/6*x[4]*x[7] + 43/6*x[4]*x[8] - 5/6*x[5]^2 + 
    17/6*x[5]*x[6] - 5/3*x[5]*x[7] - 8/3*x[5]*x[8] + 2/3*x[6]^2 + 13/3*x[6]*x[7] - 
    17/6*x[6]*x[8] + 1/3*x[7]^2 - 17/2*x[7]*x[8] - 19/2*x[8]^2,
x[3]*x[6] - x[4]*x[5] + 2/3*x[4]*x[6] + 1/3*x[4]*x[7] + 13/3*x[4]*x[8] + 1/3*x[5]^2 + 
    2/3*x[5]*x[6] + 2/3*x[5]*x[7] - 4/3*x[5]*x[8] + 4/3*x[6]^2 + 5/3*x[6]*x[7] - 
    11/3*x[6]*x[8] + 2/3*x[7]^2 - 8*x[7]*x[8] - 7*x[8]^2,
x[3]*x[7] - 2/3*x[4]*x[6] - 1/3*x[4]*x[7] - 10/3*x[4]*x[8] + 2/3*x[5]^2 - 5/3*x[5]*x[6] - 
    2/3*x[5]*x[7] - 8/3*x[5]*x[8] - 4/3*x[6]^2 - 5/3*x[6]*x[7] + 14/3*x[6]*x[8] - 2/3*x[7]^2 +
    5*x[7]*x[8] + 10*x[8]^2,
x[3]*x[8] + 5/6*x[4]*x[6] + 1/6*x[4]*x[7] + 1/6*x[4]*x[8] - 5/6*x[5]^2 + 5/6*x[5]*x[6] + 
    1/3*x[5]*x[7] + 10/3*x[5]*x[8] - 1/3*x[6]^2 - 5/3*x[6]*x[7] - 23/6*x[6]*x[8] - 2/3*x[7]^2 
    - 1/2*x[7]*x[8] - 7/2*x[8]^2,
x[1]^2*x[3] - x[1]*x[2]^2 + 3*x[4]^3 - 13*x[4]^2*x[5] + 17*x[4]*x[5]^2 + 106/23*x[4]*x[7]^2 - 
    1213/23*x[4]*x[7]*x[8] - 858/23*x[4]*x[8]^2 - 17*x[5]^3 + 21*x[5]^2*x[6] + 
    43/3*x[5]^2*x[7] + 2291/138*x[5]^2*x[8] + 22*x[5]*x[6]^2 + 3643/138*x[5]*x[6]*x[7] - 
    8005/69*x[5]*x[6]*x[8] + 258/23*x[5]*x[7]^2 - 6160/69*x[5]*x[7]*x[8] + 
    31987/138*x[5]*x[8]^2 - 112/3*x[6]^3 - 9613/138*x[6]^2*x[7] - 648/23*x[6]^2*x[8] - 
    1297/138*x[6]*x[7]^2 - 449/3*x[6]*x[7]*x[8] - 70/3*x[6]*x[8]^2 + 1139/138*x[7]^3 - 
    7301/69*x[7]^2*x[8] + 46267/138*x[7]*x[8]^2 - 2636/23*x[8]^3 ] ;


C := Curve(ProjectiveSpace(Qx), eqns) ;
K:=FunctionField(C);

// K.i := X[I]/x[8] //

g1 :=  K.1 -2/3*K.5 -1/3*K.6 -2/3*K.7 + 1 ;
g2 := K.2 -1/3*K.5  -2/3*K.6 -4/3*K.7 - 2 ;
g3 := K.3 -1/3*K.5 -2/3*K.6 -1/3*K.7 ;
g4 := K.4 +  2/3*K.5 -2/3*K.6 -4/3*K.7 -3 ;


Qy<[y]>:=PolynomialRing(Rationals(),4);
eqns2 := [ y[1]*y[3] - y[2]^2 + y[2]*y[4] - 2/3*y[3]^2 - 2/3*y[3]*y[4] - 2/3*y[4]^2 , y[1]^2*y[4] + 1/3*y[1]*y[4]^2 - y[2]^3 - 2/3*y[2]^2*y[3] + 4/3*y[2]^2*y[4] - 2/3*y[2]*y[3]^2 -
    2*y[2]*y[3]*y[4] - 19/9*y[3]^3 + 10/9*y[3]^2*y[4] - 8/9*y[3]*y[4]^2 + 2/9*y[4]^3 ] ;

D := Curve(ProjectiveSpace(Qy), eqns2 ) ;

m:=map<C->D | [g1, g2, g3, g4] >;




 // Cusps of X0(53) and their pullbacks to the cusps of X_H(53)  //


p1 := Pullback(m , Place(D ! [ 2,1,1,1]) ) ;
d1 := Decomposition(p1) ;


p2 := Pullback(m , Place(D ! [ 1,0,0,0]) ) ;
d2 :=  Decomposition(p2) ;

// the cuspidal subgroup of XH(p) //

K := QuadraticField(53) ;
OK := Integers(K);
P := PrimesUpTo(50,K) ;
P := P[3] ;

F7, pi := ResidueClassField(P) ;
Zx<[x]> := PolynomialRing(K,8) ;

eqns := [
    6*x[1]*x[3] - 6*x[2]^2 + 15*x[4]*x[6] + 5*x[4]*x[7] - 23*x[4]*x[8] - 
        15*x[5]^2 + 33*x[5]*x[6] + 10*x[5]*x[7] + 60*x[5]*x[8] - 50*x[6]^2 - 
        54*x[6]*x[7] - 39*x[6]*x[8] - 18*x[7]^2 + 37*x[7]*x[8] + 15*x[8]^2,
    6*x[1]*x[4] - 6*x[2]*x[3] - 6*x[4]^2 - 43*x[4]*x[6] - 5*x[4]*x[7] - 
        17*x[4]*x[8] + 43*x[5]^2 - 13*x[5]*x[6] - 10*x[5]*x[7] - 226*x[5]*x[8] -
        32*x[6]^2 + 68*x[6]*x[7] + 205*x[6]*x[8] + 32*x[7]^2 + 9*x[7]*x[8] + 
        225*x[8]^2,
    3*x[1]*x[5] - 3*x[3]^2 - 16*x[4]*x[6] - 28*x[4]*x[8] + 16*x[5]^2 - x[5]*x[6]
        - 3*x[5]*x[7] - 100*x[5]*x[8] - 19*x[6]^2 + 23*x[6]*x[7] + 73*x[6]*x[8] 
        + 11*x[7]^2 + 13*x[7]*x[8] + 144*x[8]^2,
    3*x[1]*x[6] - 3*x[3]*x[4] + 3*x[4]^2 - 9*x[4]*x[6] - 2*x[4]*x[7] - 
        31*x[4]*x[8] + 12*x[5]^2 - 6*x[5]*x[6] + 2*x[5]*x[7] - 66*x[5]*x[8] - 
        16*x[6]^2 + 3*x[6]*x[7] + 48*x[6]*x[8] + 6*x[7]^2 + 14*x[7]*x[8] + 
        114*x[8]^2,
    3*x[1]*x[7] - 3*x[4]*x[5] + 5*x[4]*x[6] - 3*x[4]*x[7] + 23*x[4]*x[8] - 
        5*x[5]^2 - x[5]*x[6] + 38*x[5]*x[8] + 14*x[6]^2 + 2*x[6]*x[7] - 
        23*x[6]*x[8] - x[7]^2 - 17*x[7]*x[8] - 81*x[8]^2,
    3*x[1]*x[8] - 2*x[4]*x[6] - x[4]*x[7] + 2*x[4]*x[8] - x[5]^2 + 4*x[5]*x[6] +
        x[5]*x[7] + x[5]*x[8] - x[6]^2 + x[6]*x[7] - 4*x[6]*x[8] + x[7]^2 - 
        6*x[7]*x[8] - 9*x[8]^2,
    3*x[2]*x[4] - 3*x[3]^2 - 3*x[4]*x[5] - 5*x[4]*x[6] - 3*x[4]*x[7] + x[4]*x[8]
        + 5*x[5]^2 - 5*x[5]*x[6] + 3*x[5]*x[7] - 11*x[5]*x[8] + 10*x[6]^2 + 
        10*x[6]*x[7] + 5*x[6]*x[8] + 4*x[7]^2 - 10*x[7]*x[8] + 3*x[8]^2,
    3*x[2]*x[5] - 3*x[3]*x[4] - 11*x[4]*x[6] + x[4]*x[7] - 3*x[4]*x[8] + 
        14*x[5]^2 - 11*x[5]*x[6] - 7*x[5]*x[7] - 86*x[5]*x[8] + 3*x[6]^2 + 
        34*x[6]*x[7] + 62*x[6]*x[8] + 13*x[7]^2 - 11*x[7]*x[8] + 75*x[8]^2,
    3*x[2]*x[6] - 3*x[4]^2 + 3*x[4]*x[5] - 12*x[4]*x[6] + 4*x[4]*x[7] + 
        2*x[4]*x[8] + 12*x[5]^2 - 6*x[5]*x[6] - 10*x[5]*x[7] - 75*x[5]*x[8] - 
        4*x[6]^2 + 30*x[6]*x[7] + 57*x[6]*x[8] + 9*x[7]^2 - 4*x[7]*x[8] + 
        63*x[8]^2,
    3*x[2]*x[7] + 3*x[4]*x[6] - x[4]*x[7] + x[4]*x[8] - 6*x[5]^2 + 3*x[5]*x[6] +
        x[5]*x[7] + 33*x[5]*x[8] - 2*x[6]^2 - 15*x[6]*x[7] - 21*x[6]*x[8] - 
        6*x[7]^2 + 4*x[7]*x[8] - 27*x[8]^2,
    3*x[2]*x[8] + 2*x[4]*x[6] + 2*x[4]*x[8] - 2*x[5]^2 - x[5]*x[6] + 
        11*x[5]*x[8] + 5*x[6]^2 - x[6]*x[7] - 11*x[6]*x[8] - x[7]^2 - 
        2*x[7]*x[8] - 18*x[8]^2,
    6*x[3]*x[5] - 6*x[4]^2 + 5*x[4]*x[6] + 13*x[4]*x[7] + 43*x[4]*x[8] - 
        5*x[5]^2 + 17*x[5]*x[6] - 10*x[5]*x[7] - 16*x[5]*x[8] + 4*x[6]^2 + 
        26*x[6]*x[7] - 17*x[6]*x[8] + 2*x[7]^2 - 51*x[7]*x[8] - 57*x[8]^2,
    3*x[3]*x[6] - 3*x[4]*x[5] + 2*x[4]*x[6] + x[4]*x[7] + 13*x[4]*x[8] + x[5]^2 
        + 2*x[5]*x[6] + 2*x[5]*x[7] - 4*x[5]*x[8] + 4*x[6]^2 + 5*x[6]*x[7] - 
        11*x[6]*x[8] + 2*x[7]^2 - 24*x[7]*x[8] - 21*x[8]^2,
    3*x[3]*x[7] - 2*x[4]*x[6] - x[4]*x[7] - 10*x[4]*x[8] + 2*x[5]^2 - 
        5*x[5]*x[6] - 2*x[5]*x[7] - 8*x[5]*x[8] - 4*x[6]^2 - 5*x[6]*x[7] + 
        14*x[6]*x[8] - 2*x[7]^2 + 15*x[7]*x[8] + 30*x[8]^2,
    6*x[3]*x[8] + 5*x[4]*x[6] + x[4]*x[7] + x[4]*x[8] - 5*x[5]^2 + 5*x[5]*x[6] +
        2*x[5]*x[7] + 20*x[5]*x[8] - 2*x[6]^2 - 10*x[6]*x[7] - 23*x[6]*x[8] - 
        4*x[7]^2 - 3*x[7]*x[8] - 21*x[8]^2,
    138*x[1]^2*x[3] - 138*x[1]*x[2]^2 + 414*x[4]^3 - 1794*x[4]^2*x[5] + 
        2346*x[4]*x[5]^2 + 636*x[4]*x[7]^2 - 7278*x[4]*x[7]*x[8] - 
        5148*x[4]*x[8]^2 - 2346*x[5]^3 + 2898*x[5]^2*x[6] + 1978*x[5]^2*x[7] + 
        2291*x[5]^2*x[8] + 3036*x[5]*x[6]^2 + 3643*x[5]*x[6]*x[7] - 
        16010*x[5]*x[6]*x[8] + 1548*x[5]*x[7]^2 - 12320*x[5]*x[7]*x[8] + 
        31987*x[5]*x[8]^2 - 5152*x[6]^3 - 9613*x[6]^2*x[7] - 3888*x[6]^2*x[8] - 
        1297*x[6]*x[7]^2 - 20654*x[6]*x[7]*x[8] - 3220*x[6]*x[8]^2 + 1139*x[7]^3
        - 14602*x[7]^2*x[8] + 46267*x[7]*x[8]^2 - 15816*x[8]^3
];

print "A model of the curve XH(53) is:";
eqns;
XK := Curve(ProjectiveSpace(Zx), eqns) ;

Zx<[x]> := PolynomialRing(Integers(), 8) ;
eqns := [Evaluate(e,x) : e in eqns ];

Zx<[x]> := PolynomialRing(F7,8) ;
eqns := [ Evaluate(e,x) : e in eqns] ;
X := Curve(ProjectiveSpace(Zx), eqns) ; 
XF7 := X ;


Cl, phi, psi := ClassGroup(XF7) ;
Z := FreeAbelianGroup(1) ;
degr := hom<Cl -> Z | [ Degree(phi(g)) : g in OrderedGenerators(Cl)]>;
J := Kernel(degr) ;


d1 := [ [1 , 0 , 0 , 0 , 0 , 0 , 0 , 0], [1 , 2 , 1 , 1 , 2 , 1 , -1 , 1] ];

r1 := 5/2 + K.1/2;
r2 := 5/2 - K.1/2;

d2 := [ [6*r1 + 8 , 4*r1 + 7 , 3*r1 + 5 , 3*r1 + 4 , r1 + 4 , 1 , r1 ,1] , [6*r2 + 8 , 4*r2 + 7 , 3*r2 + 5 , 3*r2 + 4 , r2 + 4 , 1 , r2 ,1]];
d := d1 cat d2 ;

print "The cusps on this model are:";
d[1] ;
d[2] ;
d[3];
d[4];
dpi := [ [ pi(a) : a in b ] : b in d ] ;
Cdpi := [ XF7  ! a : a in dpi ] ;

C1 :=  d1[1] ;
C2 :=  d1[2] ;
C3 := d2[1] ;
C4 := d2[2] ;
C1 := Place(XF7 ! pi(C1) ) ;
C2 := Place(XF7 ! pi(C2) ) ;
C3 := Place(XF7 ! pi(C3) ) ;
C4 := Place(XF7 !  pi(C4));

CC := [ Place(b) : b in Cdpi ] ;
divs := [ CC[2] - CC[1], CC[3] - CC[1], CC[4] - CC[1] ] ;
H := [ psi(a) :a  in divs] ;
ZN := FreeAbelianGroup(#H) ;
hh := hom< ZN -> J | [  a : a in H ] >;
CH := Image(hh) ;

print "The cuspidal subgroup is:";
CH;

// rational part //
cpt := [ ZN.1, ZN.3, ZN.2] ;

conj := hom< ZN -> ZN | cpt>; 
mu := hom< ZN -> J | [ hh(ZN.i) - hh(conj(ZN.i)) : i in [1..3]]>; 
ker1 := Kernel(mu);
imKer1 := sub<J | [hh(k) : k in Generators(ker1)]>;
CHQ := imKer1;

print "The rational cuspidal subgroup is:";
CHQ;

// we compute an upper bound for the Q(\sqrt(53)) rational torsion 

 P := PrimesUpTo(30,K) ; 
p := [ a : a in P | Norm(a) eq 7 ] ;
p := p[1] ;
Bound := [] ;
R,pi := ResidueClassField(p) ;
C5 := ChangeRing(XK,R) ;
CL5,phi5,pi5 := ClassGroup(C5) ;
Z := FreeAbelianGroup(1) ;

degr := hom<CL5 -> Z | [ Degree(phi5(g)) : g in OrderedGenerators(CL5)]>; 
t := #Kernel(degr) ;
 Bound[1] := t;

p := [ a : a in P | Norm(a) eq 11 ] ;
p := p[1] ;
R,pi := ResidueClassField(p) ;
C5 := ChangeRing(XK,R) ;
CL5,phi5,pi5 := ClassGroup(C5) ;
Z := FreeAbelianGroup(1) ;
degr := hom<CL5 -> Z | [ Degree(phi5(g)) : g in OrderedGenerators(CL5)]>; 

 t := #Kernel(degr) ;
Bound[2] := t;

 p := [ a : a in P | Norm(a) eq 13 ] ;
p := p[1] ;
 R,pi := ResidueClassField(p) ;
C5 := ChangeRing(XK,R) ;
 CL5,phi5,pi5 := ClassGroup(C5) ;
Z := FreeAbelianGroup(1) ;
 degr := hom<CL5 -> Z | [ Degree(phi5(g)) : g in OrderedGenerators(CL5)]>; 
 t := #Kernel(degr) ;
 Bound[3] := t;

B2 := GCD(Bound) ;

print "An upper bound for the Q(\sqrt(53)) torsion subgroup of the Jacobian is";
B2;
assert B2 eq #CH ;

print "Thus it must equal the cuspidal subgroup.";


